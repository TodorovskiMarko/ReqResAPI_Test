{
	"info": {
		"_postman_id": "9731984e-e138-48aa-b637-da1f9a99c608",
		"name": "POST Requests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28606830",
		"_collection_link": "https://solar-meteor-243212.postman.co/workspace/ReqRes~c455c962-38d8-4fba-8670-fb4be544749b/collection/28606830-9731984e-e138-48aa-b637-da1f9a99c608?action=share&source=collection_link&creator=28606830"
	},
	"item": [
		{
			"name": "Create User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
							"});\r",
							"\r",
							"pm.test('Response time is less than 200ms', function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"})\r",
							"\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test('Response contains \\'createdAt\\' field with current date and time', function () {\r",
							"    pm.expect(jsonData).to.have.property('createdAt');\r",
							"    var createdAt = new Date(jsonData.createdAt);\r",
							"    pm.expect(createdAt).to.be.a('Date').and.not.be.NaN;\r",
							"    pm.expect(createdAt.toISOString().slice(0, 10)).to.equal(new Date().toISOString().slice(0, 10));\r",
							"})\r",
							"\r",
							"pm.test('Response contains \\'id\\' field with a value', function () {\r",
							"    pm.expect(jsonData).to.have.property('id');\r",
							"    pm.expect(jsonData.id).to.be.a('string').and.not.be.empty;\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"fist_name\": \"{{firstName}}\",\r\n    \"last_name\": \"{{lastName}}\",\r\n    \"email\": \"{{email}}\",\r\n    \"job\": \"{{job}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{test_url}}/api/users",
					"host": [
						"{{test_url}}"
					],
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register - Successful",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains 'token' field with a value and 'id' field that is not empty\", function () {\r",
							"    var responseData = pm.response.json();\r",
							"    pm.expect(responseData).to.have.property('token').that.is.a('string').and.is.not.empty;\r",
							"     pm.expect(responseData).to.have.property('id').that.is.a('number').and.not.NaN;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"{{definedUser}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{test_url}}/api/register",
					"host": [
						"{{test_url}}"
					],
					"path": [
						"api",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register - Not Defined User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has correct Content-Type header\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains error message\", function () {\r",
							"    var expectedErrorMessage = pm.environment.get('BlockedRegistration_error');\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('error', expectedErrorMessage);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{test_url}}/api/register",
					"host": [
						"{{test_url}}"
					],
					"path": [
						"api",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register - Unsuccessful",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has correct Content-Type header\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains error message'\", function () {\r",
							"    var expectedErrorMessage = pm.environment.get('registerUnsuccessful_message');\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('error', expectedErrorMessage);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"{{definedUser}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{test_url}}/api/register",
					"host": [
						"{{test_url}}"
					],
					"path": [
						"api",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register - Unsuccessful No Data In Body",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has correct Content-Type header\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains error message'\", function () {\r",
							"    var expectedErrorMessage = pm.environment.get('NoData_error');\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('error', expectedErrorMessage);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{test_url}}/api/register",
					"host": [
						"{{test_url}}"
					],
					"path": [
						"api",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login - Successful",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains 'token' field with a value\", function () {\r",
							"    var responseData = pm.response.json();\r",
							"    pm.expect(responseData).to.have.property('token').that.is.a('string').and.is.not.empty;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"{{LoginEmail}}\",\r\n    \"password\": \"{{LoginPass}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{test_url}}/api/login",
					"host": [
						"{{test_url}}"
					],
					"path": [
						"api",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login - Unregistered User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has correct Content-Type header\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
							"});\r",
							"\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"pm.test(\"Response contains error message'\", function () {\r",
							"    var expectedErrorMessage = pm.environment.get('UnregisteredUser_error');\r",
							"\r",
							"    pm.expect(jsonData).to.have.property('error', expectedErrorMessage);\r",
							"});\r",
							"\r",
							"pm.test(\"Error object has correct structure\", function () {\r",
							"    pm.expect(jsonData).to.have.all.keys('error');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"{{LoginPass}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{test_url}}/api/login",
					"host": [
						"{{test_url}}"
					],
					"path": [
						"api",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login - Unsuccessful",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has correct Content-Type header\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
							"});\r",
							"\r",
							"    var jsonData = pm.response.json();\r",
							"pm.test(\"Response contains error message'\", function () {\r",
							"    var expectedErrorMessage = pm.environment.get('LoginUnsuccessful_error');\r",
							"    pm.expect(jsonData).to.have.property('error', expectedErrorMessage);\r",
							"});\r",
							"\r",
							"pm.test(\"Error object has correct structure\", function () {\r",
							"    pm.expect(jsonData).to.have.all.keys('error');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"{{LoginEmail}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{test_url}}/api/login",
					"host": [
						"{{test_url}}"
					],
					"path": [
						"api",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login - Unsuccessful No Data In Body",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has correct Content-Type header\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
							"});\r",
							"\r",
							"    var jsonData = pm.response.json();\r",
							"pm.test(\"Response contains error message'\", function () {\r",
							"    var expectedErrorMessage = pm.environment.get('NoData_error');\r",
							"    pm.expect(jsonData).to.have.property('error', expectedErrorMessage);\r",
							"});\r",
							"\r",
							"pm.test(\"Error object has correct structure\", function () {\r",
							"    pm.expect(jsonData).to.have.all.keys('error');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{test_url}}/api/login",
					"host": [
						"{{test_url}}"
					],
					"path": [
						"api",
						"login"
					]
				}
			},
			"response": []
		}
	]
}